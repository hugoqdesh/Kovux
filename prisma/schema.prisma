generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @map("_id")
  name                 String
  email                String
  emailVerified        Boolean
  image                String?
  currency             String?
  createdAt            DateTime
  updatedAt            DateTime
  sessions             Session[]
  accounts             Account[]
  FinancialTransaction FinancialTransaction[]
  AccountBalance       AccountBalance[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model WaitlistUser {
  id        String   @id @default(cuid()) @map("_id")
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("waitlist_users")
}

model FinancialTransaction {
  id        String          @id @default(cuid()) @map("_id")
  method    PaymentMethod
  amount    Float
  type      TransactionType
  note      String?
  category  String
  createdAt DateTime        @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AccountBalance {
  id     String        @id @default(cuid()) @map("_id")
  method PaymentMethod
  amount Float

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, method], name: "userId_method")
}

enum PaymentMethod {
  CASH
  DEBIT_CARD
  CREDIT_CARD
  SAVINGS_ACCOUNT
}

enum TransactionType {
  INCOME
  EXPENSE
}
